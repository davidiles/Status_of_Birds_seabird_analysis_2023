
   model {
  
  for (i in 1:ncounts) { 
    count[i] ~ dpois(mu[i]*wts[i]) # response
    mu[i] <-  exp(eta1[i]) #expected response
    eta1[i] ~ dnorm(eta[i],taunoise) #overdispersion
    eta[i] <- clny[colony[i]] + x.gam[i] #process model - colony intercept and year-smoother
    
  } ## expected response
  taunoise <- 1/pow(sdnoise,2)
  sdnoise ~ dunif(0,30)
  #taunoise ~ dgamma(1.0E-6,1.0E-6)
  #sdnoise <- 1/pow(taunoise,0.5)
  
  for(k in 1:ncolony){
    
    clny[k] ~ dnorm(0,0.01) #fixed-effects for colony means
    
  }
  
  
  ###########COMPUTING GAMs##############
  # Following Crainiceanu, C. M., Ruppert, D. & Wand, M. P. (2005). Bayesian Analysis for Penalized Spline Regression Using WinBUGS. Journal of Statistical Softare, 14 (14), 1-24.
  # X.basis is data computed in R
  
  #tauX~dgamma(1.0E-6,1.0E-6) #alternate prior, original from Cainiceanu et al.
  tauX <- 1/pow(sdX,2) # prior on precision of gam coefficients
  sdX ~ dunif(0,5)
  
  for(j in 1:nknots){ # Computation of GAM components
    beta.X[j] ~ dnorm(0,tauX) ##### should consider a dmnorm() across all j beta.X
    
    ################################################
    #alternate strategy for the beta.X - avoiding extreme values
    #          beta.X.tmp[j] ~ dnorm(0,tauX)    #I(-10,10)
    #         
    #         beta.X[j] <- max(min(beta.X.tmp[j],10),-10)
    ################################################
    
    for (i in 1:ncounts)
    {
      X.part[i,j] <- beta.X[j]*(X.basis[i,j])
      
    }
  }
  
  for (i in 1:ncounts)
  {
    x.gam[i] <- sum(X.part[i,1:nknots])
    
  }
  
  
  ### derived parameters
  for (i in 1:nyearspred)
  {
    for(j in 1:nknots){
      
      X.partpred[i,j] <- beta.X[j]*(X.pred[i,j])
    } #j
    x.gampred[i] <- sum(X.partpred[i,1:nknots])
    
    for(k in 1:ncolony){
      etapredlog[k,i] <- clny[k] + x.gampred[i]
      etapred[k,i] <- exp(etapredlog[k,i])*wtlst[k]
      
    } #k
    
    pop[i] <- sum(etapred[1:ncolony,i])
    
  } #i
  
  
  
}
    
